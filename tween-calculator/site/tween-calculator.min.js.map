{"version":3,"file":"tween-calculator.min.js","sources":["../src/tween-calculator.js"],"sourcesContent":["/**\n * A class to calculate intermediate states (tweens) between keyframes for CSS properties.\n */\nexport default class TweenCalculator {\n  /**\n   * Create a TweenCalculator.\n   * @param {Object[]} keyframes - Array of keyframe objects, each containing a percent (0-100) and styles.\n   */\n  constructor(keyframes) {\n    const _ = this;\n    _.setKeyframes(keyframes);\n    _.discreteProperties = [\n      // Layout\n      'display', 'position', 'float', 'clear', 'visibility', 'overflow', 'overflow-x', 'overflow-y',\n      \n      // Flexbox and Grid\n      'flex-direction', 'flex-wrap', 'justify-content', 'align-items', 'align-content', 'order',\n      'grid-template-columns', 'grid-template-rows', 'grid-template-areas', 'grid-auto-flow',\n      \n      // Positioning\n      'z-index',\n      \n      // Table\n      'table-layout', 'empty-cells', 'caption-side',\n      \n      // List\n      'list-style-type', 'list-style-position',\n      \n      // Miscellaneous\n      'pointer-events', 'user-select', 'box-sizing', 'resize',\n      \n      // Text and Font\n      'text-align', 'text-transform', 'white-space', 'word-break', 'word-wrap', 'font-style', 'font-weight', 'font-variant',\n      \n      // Background\n      'background-repeat', 'background-attachment', 'background-position',\n      \n      // Border\n      'border-style', 'border-collapse',\n      \n      // Generated content\n      'content',\n      \n      // Paged media\n      'page-break-before', 'page-break-after', 'page-break-inside'\n    ];\n  }\n\n  /**\n   * Calculate the tween state at a given normalized position.\n   * @param {number} position - The normalized position (0-1) at which to calculate the tween. Values outside 0-1 are allowed.\n   * @returns {Object} An object containing the interpolated styles.\n   */\n  calculateTween(position) {\n    const _ = this;\n    const interpolatedStyles = {};\n    \n    // Normalize position to percentage (0-100)\n    const percent = position * 100;\n\n    // Iterate through all properties across all keyframes\n    const allProperties = new Set(_.keyframes.flatMap(kf => Object.keys(kf.styles)));\n\n    for (const prop of allProperties) {\n      interpolatedStyles[prop] = _.interpolateProperty(prop, percent);\n    }\n\n    return interpolatedStyles;\n  }\n\n  /**\n   * Interpolate a single property across all keyframes.\n   * @param {string} prop - The name of the property to interpolate.\n   * @param {number} percent - The position (0-100) at which to interpolate.\n   * @returns {*} The interpolated value of the property.\n   */\n  interpolateProperty(prop, percent) {\n    const _ = this;\n    \n    if (_.discreteProperties.includes(prop)) {\n      return _.interpolateDiscreteProperty(prop, percent);\n    }\n\n    const relevantKeyframes = _.keyframes.filter(kf => prop in kf.styles);\n    if (relevantKeyframes.length === 0) return null;\n    if (relevantKeyframes.length === 1) return relevantKeyframes[0].styles[prop];\n\n    // Handle positions below the first keyframe\n    if (percent <= relevantKeyframes[0].percent) {\n      return relevantKeyframes[0].styles[prop];\n    }\n\n    // Handle positions above the last keyframe\n    if (percent >= relevantKeyframes[relevantKeyframes.length - 1].percent) {\n      return relevantKeyframes[relevantKeyframes.length - 1].styles[prop];\n    }\n\n    // Find the two keyframes that surround the current position\n    let startFrame = relevantKeyframes[0];\n    let endFrame = relevantKeyframes[relevantKeyframes.length - 1];\n    for (let i = 0; i < relevantKeyframes.length - 1; i++) {\n      if (percent >= relevantKeyframes[i].percent && percent <= relevantKeyframes[i + 1].percent) {\n        startFrame = relevantKeyframes[i];\n        endFrame = relevantKeyframes[i + 1];\n        break;\n      }\n    }\n\n    const startValue = startFrame.styles[prop];\n    const endValue = endFrame.styles[prop];\n    const factor = (percent - startFrame.percent) / (endFrame.percent - startFrame.percent);\n\n    if (prop === 'transform') {\n      return _.interpolateTransform(startValue, endValue, factor);\n    }\n\n    return _.interpolateValue(startValue, endValue, factor);\n  }\n\n  /**\n   * Interpolate discrete properties.\n   * @param {string} prop - The name of the discrete property.\n   * @param {number} percent - The position (0-100) at which to interpolate.\n   * @returns {*} The value of the discrete property at the given position.\n   */\n  interpolateDiscreteProperty(prop, percent) {\n    const _ = this;\n    const relevantKeyframes = _.keyframes.filter(kf => prop in kf.styles);\n    if (relevantKeyframes.length === 0) return null;\n    \n    // Find the last keyframe that's at or before the current position\n    const activeKeyframe = relevantKeyframes.reduce((prev, curr) => \n      (curr.percent <= percent && curr.percent > prev.percent) ? curr : prev\n    );\n\n    return activeKeyframe.styles[prop];\n  }\n\n\n  /**\n   * Interpolate between two transform values.\n   * @param {string} startTransform - The starting transform value.\n   * @param {string} endTransform - The ending transform value.\n   * @param {number} factor - The interpolation factor (0-1).\n   * @returns {string} The interpolated transform value.\n   */\n  interpolateTransform(startTransform, endTransform, factor) {\n    const _ = this;\n    const startFunctions = _.parseTransform(startTransform);\n    const endFunctions = _.parseTransform(endTransform);\n\n    const interpolatedFunctions = [];\n\n    // Interpolate functions that exist in both start and end\n    const allFunctions = new Set([...Object.keys(startFunctions), ...Object.keys(endFunctions)]);\n    for (const func of allFunctions) {\n      const start = startFunctions[func] || (_.isNumericFunction(func) ? { value: 0, unit: 'px' } : { value: 0, unit: '' });\n      const end = endFunctions[func] || { value: start.value, unit: start.unit };\n      \n      if (Array.isArray(start.value)) {\n        // Handle functions with multiple arguments\n        const interpolatedArgs = start.value.map((arg, index) => {\n          const endArg = (end.value[index] !== undefined) ? end.value[index] : { value: arg.value, unit: arg.unit };\n          const interpolatedValue = _.interpolateValue(arg.value, endArg.value, factor, true);\n          return `${interpolatedValue}${arg.unit || ''}`;\n        });\n        interpolatedFunctions.push(`${func}(${interpolatedArgs.join(', ')})`);\n      } else {\n        // Interpolate the numeric value\n        const interpolatedValue = _.interpolateValue(start.value, end.value, factor, true);\n        interpolatedFunctions.push(`${func}(${interpolatedValue}${start.unit || ''})`);\n      }\n    }\n\n    return interpolatedFunctions.join(' ');\n  }\n\n  /**\n   * Parse a transform string into an object of transform functions.\n   * @param {string} transform - The transform string to parse.\n   * @returns {Object} An object where keys are function names and values are objects with value and unit.\n   */\n  parseTransform(transform) {\n    const functions = {};\n    const regex = /(\\w+)\\(([^)]+)\\)/g;\n    let match;\n    while ((match = regex.exec(transform)) !== null) {\n      const [, func, args] = match;\n      \n      // Handle multiple arguments, e.g., translateX(78.00px) translateY(50.00px)\n      const argParts = args.split(/\\s*,\\s*|\\s+/).map(arg => {\n        const valueMatch = arg.match(/^(-?\\d*\\.?\\d+)(\\D*)$/);\n        if (valueMatch) {\n          return {\n            value: parseFloat(valueMatch[1]),\n            unit: valueMatch[2]\n          };\n        }\n        return { value: 0, unit: '' };\n      });\n\n      // For functions with multiple arguments, store them as an array\n      if (argParts.length > 1) {\n        functions[func] = argParts;\n      } else {\n        functions[func] = argParts[0];\n      }\n    }\n    return functions;\n  }\n\n  /**\n   * Interpolate between two values.\n   * @param {*} start - The starting value.\n   * @param {*} end - The ending value.\n   * @param {number} factor - The interpolation factor (0-1).\n   * @param {boolean} isNumeric - Indicates if the values are numeric.\n   * @returns {*} The interpolated value of the property.\n   */\n  interpolateValue(start, end, factor, isNumeric = false) {\n    const _ = this;\n\n    // Handle color interpolation\n    if (_.isColor(start) && _.isColor(end)) {\n      return _.interpolateColor(start, end, factor);\n    }\n\n    // Handle numeric values without units\n    if (typeof start === 'number' && typeof end === 'number') {\n      const interpolatedValue = start + (end - start) * factor;\n      // Format to avoid floating point precision issues\n      return parseFloat(interpolatedValue.toFixed(4)).toString();\n    }\n\n    // Handle numeric values with units\n    const startParsed = _.parseValue(start);\n    const endParsed = _.parseValue(end);\n\n    if (startParsed && endParsed && startParsed.unit === endParsed.unit) {\n      const interpolatedValue = startParsed.value + (endParsed.value - startParsed.value) * factor;\n      \n      // Ensure only valid numbers with up to two decimal points\n      let formattedValue = interpolatedValue.toFixed(2);\n      \n      // Remove trailing zeros and decimal if not needed\n      formattedValue = formattedValue.replace(/\\.00$/, '').replace(/(\\.\\d)0$/, '$1');\n      \n      return `${formattedValue}${startParsed.unit || ''}`;\n    }\n\n    // For any other case, use discrete steps but ensure smooth transition\n    return factor < 1 ? start : end;\n  }\n\n  /**\n   * Parse a value into its numeric part and unit.\n   * @param {string|number} value - The value to parse.\n   * @returns {Object|null} An object with value and unit properties, or null if parsing fails.\n   */\n  parseValue(value) {\n    if (typeof value === 'number') {\n      return { value: value, unit: '' };\n    }\n    const match = String(value).match(/^(-?\\d*\\.?\\d+)(\\D*)$/);\n    if (match) {\n      return { value: parseFloat(match[1]), unit: match[2] };\n    }\n    return null;\n  }\n\n  /**\n   * Check if a value is a valid color (supports hex, rgb, rgba, hsl, hsla).\n   * @param {string} value - The value to check.\n   * @returns {boolean} True if the value is a valid color, false otherwise.\n   */\n  isColor(value) {\n    return /^(#[0-9A-Fa-f]{6}|rgb\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*\\)|rgba\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*[\\d.]+\\s*\\)|hsl\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*\\)|hsla\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*,\\s*[\\d.]+\\s*\\))$/.test(value);\n  }\n\n  /**\n   * Interpolate between two colors.\n   * @param {string} start - The starting color.\n   * @param {string} end - The ending color.\n   * @param {number} factor - The interpolation factor (0-1).\n   * @returns {string} The interpolated color.\n   */\n  interpolateColor(start, end, factor) {\n    const _ = this;\n    \n    // Convert both colors to RGB\n    const startRGB = _.colorToRGB(start);\n    const endRGB = _.colorToRGB(end);\n\n    // Interpolate each channel\n    const r = Math.round(startRGB[0] + factor * (endRGB[0] - startRGB[0]));\n    const g = Math.round(startRGB[1] + factor * (endRGB[1] - startRGB[1]));\n    const b = Math.round(startRGB[2] + factor * (endRGB[2] - startRGB[2]));\n\n    // Convert back to hex\n    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()}`;\n  }\n\n  /**\n   * Convert a color to RGB values.\n   * @param {string} color - The color to convert (hex, rgb, rgba, hsl, hsla).\n   * @returns {number[]} An array of RGB values.\n   */\n  colorToRGB(color) {\n    const _ = this;\n    if (color.startsWith('#')) {\n      return [\n        parseInt(color.slice(1, 3), 16),\n        parseInt(color.slice(3, 5), 16),\n        parseInt(color.slice(5, 7), 16)\n      ];\n    }\n    const rgbMatch = color.match(/^rgb\\s*\\(\\s*(\\d+),\\s*(\\d+),\\s*(\\d+)\\s*\\)$/);\n    if (rgbMatch) {\n      return [parseInt(rgbMatch[1]), parseInt(rgbMatch[2]), parseInt(rgbMatch[3])];\n    }\n    const rgbaMatch = color.match(/^rgba\\s*\\(\\s*(\\d+),\\s*(\\d+),\\s*(\\d+),\\s*[\\d.]+\\s*\\)$/);\n    if (rgbaMatch) {\n      return [parseInt(rgbaMatch[1]), parseInt(rgbaMatch[2]), parseInt(rgbaMatch[3])];\n    }\n    const hslMatch = color.match(/^hsl\\s*\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*\\)$/);\n    if (hslMatch) {\n      // Convert HSL to RGB\n      return _.hslToRGB(color);\n    }\n    const hslaMatch = color.match(/^hsla\\s*\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*,\\s*[\\d.]+\\s*\\)$/);\n    if (hslaMatch) {\n      // Convert HSL to RGB (ignoring alpha)\n      return _.hslToRGB(color);\n    }\n    // Unsupported format; default to black\n    return [0, 0, 0];\n  }\n\n  /**\n   * Convert an HSL color to RGB.\n   * @param {string} hsl - The HSL color string.\n   * @returns {number[]} An array of RGB values.\n   */\n  hslToRGB(hsl) {\n    const _ = this;\n    const hslMatch = hsl.match(/^hsl[a]?\\(\\s*(\\d+),\\s*(\\d+)%?,\\s*(\\d+)%?\\s*\\)$/);\n    if (!hslMatch) return [0, 0, 0];\n\n    let h = parseInt(hslMatch[1], 10);\n    let s = parseInt(hslMatch[2], 10) / 100;\n    let l = parseInt(hslMatch[3], 10) / 100;\n\n    h = h % 360;\n    if (h < 0) h += 360;\n\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n    const m = l - c / 2;\n\n    let r1, g1, b1;\n    if (0 <= h && h < 60) {\n      [r1, g1, b1] = [c, x, 0];\n    } else if (60 <= h && h < 120) {\n      [r1, g1, b1] = [x, c, 0];\n    } else if (120 <= h && h < 180) {\n      [r1, g1, b1] = [0, c, x];\n    } else if (180 <= h && h < 240) {\n      [r1, g1, b1] = [0, x, c];\n    } else if (240 <= h && h < 300) {\n      [r1, g1, b1] = [x, 0, c];\n    } else {\n      [r1, g1, b1] = [c, 0, x];\n    }\n\n    const r = Math.round((r1 + m) * 255);\n    const g = Math.round((g1 + m) * 255);\n    const b = Math.round((b1 + m) * 255);\n\n    return [r, g, b];\n  }\n\n  /**\n   * Update the keyframes.\n   * @param {Object[]} keyframes - Array of keyframe objects, each containing a percent and styles.\n   */\n  setKeyframes(keyframes){\n    this.keyframes = keyframes.sort((a, b) => a.percent - b.percent);\n  }\n\n  /**\n   * Determine if a transform function should be treated as numeric.\n   * @param {string} func - The transform function name.\n   * @returns {boolean} True if the function is numeric, false otherwise.\n   */\n  isNumericFunction(func) {\n    const numericTransforms = [\n      'translate', 'translateX', 'translateY', 'translateZ',\n      'scale', 'scaleX', 'scaleY', 'scaleZ',\n      'rotate', 'rotateX', 'rotateY', 'rotateZ',\n      'skew', 'skewX', 'skewY',\n      'perspective'\n    ];\n    return numericTransforms.includes(func);\n  }\n}\n"],"names":[],"mappings":"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"}