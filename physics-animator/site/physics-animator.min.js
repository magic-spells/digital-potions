!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).PhysicsAnimator=e()}(this,(function(){"use strict";!function(t){class DPEventEmitter{#t;constructor(){this.#t=new Map}on(t,e){if("function"!=typeof e)throw new TypeError("Listener must be a function");const i=this.#t.get(t)||[];return i.includes(e)||i.push(e),this.#t.set(t,i),this}off(t,e){const i=this.#t.get(t);if(!i)return this;const n=i.indexOf(e);return-1!==n&&(i.splice(n,1),0===i.length?this.#t.delete(t):this.#t.set(t,i)),this}emit(t,...e){const i=this.#t.get(t);if(!i||0===i.length)return!1;for(let n=0,r=i.length;n<r;++n)try{i[n].apply(this,e)}catch(e){console.error(`Error in listener for event '${t}':`,e)}return!0}removeAllListeners(t){return t?this.#t.delete(t):this.#t.clear(),this}}t.exports?t.exports=DPEventEmitter:"undefined"!=typeof window&&(window.DPEventEmitter=DPEventEmitter)}({exports:{}});return class{constructor({attraction:t=.026,friction:e=.28}={}){if("number"!=typeof t||t<0||t>1)throw new Error("Attraction must be a number between 0 and 1.");if("number"!=typeof e||e<0||e>1)throw new Error("Friction must be a number between 0 and 1.");this.attraction=t,this.friction=e,this.frictionFactor=1-e,this.velocity=0,this.currentValue=0,this.targetValue=0,this.isAnimating=!1,this.prevTime=null}animateTo(t,e,i,n){return new Promise((r=>{this.currentValue=t,this.targetValue=e,this.velocity=i,this.isAnimating=!0,this.prevTime=null;const s=e=>{if(!this.isAnimating)return;if(null===this.prevTime)return this.prevTime=e,void requestAnimationFrame(s);const i=(e-this.prevTime)/16.66;this.prevTime=e;const o=(this.targetValue-this.currentValue)*this.attraction;this.velocity+=o*i,this.velocity*=Math.pow(this.frictionFactor,i),this.currentValue+=this.velocity*i;const a=this.targetValue-t,h=this.currentValue-t;let u=0;if(0!==a&&(u=h/a),n({position:this.currentValue,progress:u}),Math.abs(this.currentValue-this.targetValue)<.01)return this.isAnimating=!1,n({position:this.targetValue,progress:1}),void r();requestAnimationFrame(s)};requestAnimationFrame(s)}))}stop(){this.isAnimating=!1}setAttraction(t){if("number"!=typeof t||t<0||t>1)throw new Error("Attraction must be a number between 0 and 1.");this.attraction=t}setFriction(t){if("number"!=typeof t||t<0||t>1)throw new Error("Friction must be a number between 0 and 1.");this.friction=t,this.frictionFactor=1-t}}}));
